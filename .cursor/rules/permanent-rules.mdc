---
alwaysApply: true
---

# R√®gles de compatibilit√© HTML/GWT pour le projet Calendar

## üö´ Interdictions strictes pour la compatibilit√© GWT

### String.format() - INTERDIT
- **NE JAMAIS** utiliser `String.format()` dans le code
- **Remplacer par** : `GwtCompatibleFormatter.formatFloat()` ou `GwtCompatibleFormatter.format()`
- **Raison** : GWT ne supporte pas `String.format()`

### Classes Java non support√©es par GWT
- **INTERDIT** : `java.util.Formatter`
- **INTERDIT** : `java.text.DecimalFormat`
- **INTERDIT** : `java.util.Locale` (sauf les constantes)
- **INTERDIT** : `java.util.Currency`
- **INTERDIT** : `java.util.TimeZone`

### R√©flexion (Reflection) - INTERDIT
- **INTERDIT** : `Class.forName()`
- **INTERDIT** : `getClass().getMethod()`
- **INTERDIT** : `getClass().getField()`
- **INTERDIT** : `newInstance()` sur des classes dynamiques

### I/O et fichiers - RESTRICTIONS
- **INTERDIT** : `java.io.File`
- **INTERDIT** : `java.nio.file.*`
- **AUTORIS√â** : `Gdx.files.internal()` uniquement
- **AUTORIS√â** : `Gdx.files.external()` avec pr√©caution

### Gestion des entr√©es (Input) - RESTRICTIONS
- **INTERDIT** : `Gdx.input.justTouched()` et `Gdx.input.isTouched()` en mode HTML
- **INTERDIT** : Gestion directe des √©v√©nements tactiles sans InputProcessor
- **RAISON** : Comportement diff√©rent entre desktop et HTML/GWT
- **OBLIGATOIRE** : Utiliser `InputAdapter` pour toutes les interactions tactiles

## ‚úÖ Bonnes pratiques obligatoires

### Formatage des nombres
```java
// ‚ùå INTERDIT
String.format("%.2f", value)

// ‚úÖ OBLIGATOIRE
GwtCompatibleFormatter.formatFloat(value, 2)
```

### Gestion des exceptions
```java
// ‚úÖ OBLIGATOIRE - Toujours g√©rer les exceptions GWT
try {
    // Code qui peut √©chouer en GWT
} catch (Exception e) {
    Gdx.app.log("Error", "GWT compatible error handling: " + e.getMessage());
}
```

### Imports sp√©cifiques GWT
```java
// ‚úÖ OBLIGATOIRE pour les nouvelles classes
import com.widedot.calendar.utils.GwtCompatibleFormatter;
```

### Gestion des entr√©es (Input) - OBLIGATOIRE
```java
// ‚ùå INTERDIT - Ne fonctionne pas en HTML
if (Gdx.input.justTouched()) {
    handleTouchStart();
}
if (Gdx.input.isTouched()) {
    handleTouchContinue();
}

// ‚úÖ OBLIGATOIRE - InputProcessor compatible HTML
private InputAdapter inputProcessor;

private void createInputProcessor() {
    inputProcessor = new InputAdapter() {
        @Override
        public boolean touchDown(int screenX, int screenY, int pointer, int button) {
            // Gestion du d√©but de toucher
            return true;
        }
        
        @Override
        public boolean touchDragged(int screenX, int screenY, int pointer) {
            // Gestion du glisser-d√©poser
            return true;
        }
        
        @Override
        public boolean touchUp(int screenX, int screenY, int pointer, int button) {
            // Gestion de la fin de toucher
            return true;
        }
    };
}

@Override
public void show() {
    // Activer l'input processor
    if (inputProcessor != null) {
        Gdx.input.setInputProcessor(inputProcessor);
    }
}

@Override
public void hide() {
    // D√©sactiver l'input processor
    Gdx.input.setInputProcessor(null);
}
```

## üìù Communication avec l'utilisateur

### R√®gle de concision - OBLIGATOIRE
- **NE PAS** cr√©er de documents r√©capitulatifs automatiquement
- **NE PAS** g√©n√©rer de longues explications
- **√äTRE CONCIS** : Se concentrer sur les actions et corrections
- **√âVITER** : Markdown √©labor√©s, tableaux complexes, longues documentations
- **PRIVIL√âGIER** : R√©sum√©s courts (3-5 lignes max), code comment√©
- **RAISON** : Les tokens de sortie co√ªtent tr√®s cher √† l'utilisateur

### Quand documenter
- **UNIQUEMENT** si l'utilisateur le demande explicitement
- **UNIQUEMENT** pour des bugs critiques n√©cessitant une trace
- **Format** : Court et factuel (100-200 mots max)

## üîß R√®gles de d√©veloppement

### Avant chaque commit
1. **V√©rifier** qu'aucun `String.format()` n'est pr√©sent
2. **V√©rifier** qu'aucun `Gdx.input.justTouched()` ou `Gdx.input.isTouched()` n'est utilis√©
3. **Tester** la compilation GWT : `.\gradlew.bat :html:draftCompileGwt`
4. **V√©rifier** que le serveur HTML d√©marre : `.\gradlew.bat :html:superDev`
5. **Tester** la navigation par glisser-d√©poser en mode HTML

### Structure des fichiers
- **Toujours** placer les utilitaires GWT dans `core/src/main/java/com/widedot/calendar/utils/`
- **√âviter** les d√©pendances circulaires entre modules
- **Utiliser** `PlatformFactory` pour les fonctionnalit√©s sp√©cifiques √† la plateforme

### Gestion des assets
- **Toujours** utiliser `Gdx.files.internal()` pour les assets
- **V√©rifier** que tous les assets sont dans le r√©pertoire `assets/`
- **Tester** l'acc√®s aux assets via le serveur de d√©veloppement

### Gestion des entr√©es (Input)
- **Toujours** utiliser `InputAdapter` pour les interactions tactiles
- **Activer** l'InputProcessor dans `show()` et le d√©sactiver dans `hide()`
- **√âviter** les appels directs √† `Gdx.input` dans la boucle de rendu
- **Tester** la navigation par glisser-d√©poser sur desktop ET HTML

## üö® Points de vigilance

### Debug et logging
- **Utiliser** `Gdx.app.log()` au lieu de `System.out.println()`
- **√âviter** les logs trop verbeux en mode production
- **Tester** les messages d'erreur en mode HTML

### Performance
- **Minimiser** les allocations d'objets dans les boucles de rendu
- **Utiliser** les pools d'objets LibGDX quand possible
- **√âviter** les op√©rations co√ªteuses dans `render()`

### Compatibilit√© navigateurs
- **Tester** sur Chrome, Firefox, Safari, Edge
- **V√©rifier** la compatibilit√© mobile
- **Utiliser** les viewports responsives

### Navigation et interactions
- **Tester** la navigation par glisser-d√©poser sur desktop ET HTML
- **V√©rifier** que les clics fonctionnent correctement
- **S'assurer** que les InputProcessors sont correctement activ√©s/d√©sactiv√©s
- **√âviter** les conflits entre diff√©rents InputProcessors

## üìã Checklist de validation

Avant de marquer une fonctionnalit√© comme "HTML compatible" :

- [ ] Aucun `String.format()` utilis√©
- [ ] Aucun `Gdx.input.justTouched()` ou `Gdx.input.isTouched()` utilis√©
- [ ] InputProcessors correctement impl√©ment√©s et activ√©s
- [ ] Compilation GWT r√©ussie sans erreurs
- [ ] Serveur de d√©veloppement accessible sur http://localhost:8080
- [ ] Assets charg√©s correctement
- [ ] Interface responsive fonctionnelle
- [ ] Navigation par glisser-d√©poser fonctionnelle (desktop ET HTML)
- [ ] Sons et musiques jou√©s
- [ ] Mini-jeux fonctionnels
- [ ] Sauvegarde/chargement des donn√©es
- [ ] Gestion des erreurs robuste

## üîÑ Maintenance continue

### Surveillance des d√©pendances
- **V√©rifier** que les nouvelles d√©pendances sont compatibles GWT
- **√âviter** les biblioth√®ques qui utilisent la r√©flexion
- **Pr√©f√©rer** les alternatives LibGDX quand possible

### Tests r√©guliers
- **Ex√©cuter** `.\gradlew.bat :html:clean` avant chaque test
- **V√©rifier** que tous les modules compilent
- **Tester** le d√©ploiement avec `.\gradlew.bat :html:dist`
- **Tester** la navigation par glisser-d√©poser sur desktop ET HTML
- **V√©rifier** que tous les InputProcessors fonctionnent correctement

### D√©tection de probl√®mes d'input
- **Si** une interaction ne fonctionne pas en HTML mais fonctionne en desktop
- **V√©rifier** l'utilisation de `Gdx.input` direct dans le code
- **Remplacer** par `InputProcessor` si n√©cessaire
- **Tester** imm√©diatement apr√®s modification

Ces r√®gles garantissent que votre jeu reste 100% compatible avec le mode HTML/GWT de LibGDX.